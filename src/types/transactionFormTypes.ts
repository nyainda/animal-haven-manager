import * as z from 'zod';
import {
  transactionTypes,
  transactionStatusOptions,
  paymentMethods,
  currencies,
  type TransactionType,
  type TransactionStatus,
  type PaymentMethod,
  type Currency
} from '@/constants/transaction';

export const formSchema = z.object({
  // Required fields (matching TransactionFormData)
  transaction_type: z.enum(transactionTypes as [TransactionType, ...TransactionType[]]),
  currency: z.enum(currencies as [Currency, ...Currency[]]),
  payment_method: z.enum(paymentMethods as [PaymentMethod, ...PaymentMethod[]]),
  seller_name: z.string().min(1, 'Seller name is required'),
  buyer_name: z.string().min(1, 'Buyer name is required'),
  price: z.number().min(0, 'Price must be a positive number'),
  tax_amount: z.number().min(0, 'Tax amount must be a non-negative number'),
  transaction_date: z.string().min(1, 'Transaction date is required'),
  
  // Optional fields
  animal_id: z.string().optional(),
  transaction_status: z.enum(transactionStatusOptions as [TransactionStatus, ...TransactionStatus[]]).optional(),
  delivery_date: z.string().nullable().optional(),
  details: z.string().nullable().optional(),
  payment_reference: z.string().nullable().optional(),
  deposit_amount: z.number().min(0, 'Deposit amount must be a positive number').nullable().optional(),
  payment_due_date: z.string().nullable().optional(),
  seller_id: z.number().min(1, 'Seller ID is required').optional(),
  buyer_id: z.number().min(1, 'Buyer ID is required').optional(),
  seller_company: z.string().nullable().optional(),
  seller_tax_id: z.string().nullable().optional(),
  seller_email: z.string().email().nullable().optional(),
  seller_phone: z.string().nullable().optional(),
  seller_address: z.string().nullable().optional(),
  seller_city: z.string().nullable().optional(),
  seller_state: z.string().nullable().optional(),
  seller_country: z.string().nullable().optional(),
  seller_postal_code: z.string().nullable().optional(),
  seller_identification: z.string().nullable().optional(),
  seller_license_number: z.string().nullable().optional(),
  buyer_company: z.string().nullable().optional(),
  buyer_tax_id: z.string().nullable().optional(),
  buyer_email: z.string().email().nullable().optional(),
  buyer_phone: z.string().nullable().optional(),
  buyer_address: z.string().nullable().optional(),
  buyer_city: z.string().nullable().optional(),
  buyer_state: z.string().nullable().optional(),
  buyer_country: z.string().nullable().optional(),
  buyer_postal_code: z.string().nullable().optional(),
  buyer_identification: z.string().nullable().optional(),
  buyer_license_number: z.string().nullable().optional(),
  invoice_number: z.string().nullable().optional(),
  contract_number: z.string().nullable().optional(),
  terms_accepted: z.boolean().nullable().optional(),
  health_certificate_number: z.string().nullable().optional(),
  transport_license_number: z.string().nullable().optional(),
  location_of_sale: z.string().nullable().optional(),
  terms_and_conditions: z.string().nullable().optional(),
  special_conditions: z.string().nullable().optional(),
  delivery_instructions: z.string().nullable().optional(),
  insurance_policy_number: z.string().nullable().optional(),
  insurance_amount: z.number().min(0, 'Insurance amount must be a non-negative number').nullable().optional(),
});

export type FormData = z.infer<typeof formSchema>;